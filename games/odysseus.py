import random
from games.base_game import BaseGame


class OdysseusGame(BaseGame):
    """Игра 'Одиссей Телемаку' по мотивам стихотворения Бродского"""

    name = "Одиссей Телемаку"
    poem = "Одиссей Телемаку"
    description = "Путешествие Одиссея домой, к сыну, через испытания и мудрость"

    def __init__(self, user_id: int):
        super().__init__(user_id)

        # Основные параметры игры
        self.wisdom = 0  # Мудрость (0-100)
        self.homesickness = 0  # Тоска по дому (0-100)
        self.journey = 0  # Пройденный путь (0-100)
        self.messages_sent = 0  # Количество отправленных посланий

        # Текущая локация
        self.current_location = "море"

        # Доступные локации
        self.locations = {
            "море": {
                "description": "Бескрайнее море, где волны говорят на неизвестном языке",
                "npcs": ["посейдон", "старый_моряк"],
                "items": ["обломки корабля", "веревка"],
                "connections": ["остров_кирки"],
            },
            "остров_кирки": {
                "description": "Остров Кирки, где время замедляется",
                "npcs": ["кирка", "превращенные_в_свиней"],
                "items": ["странные травы", "кубок с вином"],
                "connections": ["море", "царство_аида"],
            },
            "царство_аида": {
                "description": "Вход в царство мертвых, мир теней и прошлого",
                "npcs": ["тиресий", "антиклея"],
                "items": ["чаша для жертвоприношений"],
                "connections": ["остров_кирки", "остров_сирен"],
            },
            "остров_сирен": {
                "description": "Остров сирен, чьи песни обещают знание",
                "npcs": ["сирены"],
                "items": ["воск для ушей", "обрывки карт"],
                "connections": ["царство_аида", "между_сциллой_и_харибдой"],
            },
            "между_сциллой_и_харибдой": {
                "description": "Пролив между Сциллой и Харибдой, где нужно выбирать меньшее из зол",
                "npcs": ["сцилла", "харибда"],
                "items": ["весло"],
                "connections": ["остров_сирен", "остров_калипсо"],
            },
            "остров_калипсо": {
                "description": "Остров нимфы Калипсо, где обещано бессмертие",
                "npcs": ["калипсо", "гермес"],
                "items": ["плотницкие инструменты"],
                "connections": ["между_сциллой_и_харибдой", "итака"],
            },
            "итака": {
                "description": "Твой родной остров, твой дом, где тебя ждут жена и сын",
                "npcs": ["телемак", "пенелопа"],
                "items": [],
                "connections": ["остров_калипсо"],
            },
        }

        # Инвентарь игрока
        self.inventory = []

        # Поэтические фрагменты для посланий
        self.message_fragments = [
            {
                "text": "Мой Телемак, Троянская война окончена. Кто победил — не помню.",
                "effects": {"wisdom": 5, "homesickness": 3},
            },
            {
                "text": "Должно быть, греки: столько мертвецов вне дома бросить могут только греки...",
                "effects": {"wisdom": 3, "homesickness": 5},
            },
            {
                "text": "Когда б не Паламед, мы жили вместе. Но может быть и прав он: без меня ты от страстей Эдиповых избавлен.",
                "effects": {"wisdom": 8, "homesickness": 2},
            },
            {
                "text": "Все острова похожи друг на друга, когда так долго странствуешь...",
                "effects": {"wisdom": 6, "homesickness": 4},
            },
            {
                "text": "Не догонять утраченное время — лишь память о любви сильнее смерти.",
                "effects": {"wisdom": 7, "homesickness": 5},
            },
            {
                "text": "Мне неизвестно, где я нахожусь, что предо мной. Какой-то грязный остров, кусты, постройки, хрюканье свиней, заросший сад, какая-то царица, трава да камни…",
                "effects": {"wisdom": 4, "homesickness": 6},
            },
            {
                "text": "И все-таки ведущая домой дорога оказалась слишком длинной, как будто Посейдон, пока мы там теряли время, растянул пространство.",
                "effects": {"wisdom": 9, "homesickness": 3},
            },
            {
                "text": "Расти большой, мой Телемак, расти. Лишь боги знают, свидимся ли снова.",
                "effects": {"wisdom": 5, "homesickness": 8},
            },
        ]

        # Состояние игры
        self.state = "normal"  # normal, message_selection, writing_custom, game_over
        self.temp_data = {}  # Временные данные для многоэтапных взаимодействий

    def save_game_state(self) -> str:
        """Создание компактного представления состояния игры для сохранения"""
        state_parts = [
            "odysseus",
            str(self.wisdom),
            str(self.homesickness),
            str(self.journey),
            str(self.messages_sent),
            self.current_location,
            self.state,
        ]

        # Добавляем инвентарь
        inventory_str = ",".join(self.inventory) if self.inventory else "none"
        state_parts.append(inventory_str)

        return ":".join(state_parts)

    @classmethod
    def load_from_state_string(cls, user_id: int, state_string: str) -> "OdysseusGame":
        """Восстановление игры из сохраненного состояния"""
        game = cls(user_id)

        if not state_string or not state_string.startswith("odysseus:"):
            return game

        parts = state_string.split(":")
        if len(parts) >= 7:
            game.wisdom = int(parts[1])
            game.homesickness = int(parts[2])
            game.journey = int(parts[3])
            game.messages_sent = int(parts[4])
            game.current_location = parts[5]
            game.state = parts[6]

            if len(parts) >= 8 and parts[7] != "none":
                game.inventory = parts[7].split(",")

        return game

    def get_help(self) -> str:
        """Получить справку по игре"""
        print("Inside get_help method")
        help_text = """
📜 Доступные команды:

Навигация:
- осмотреться - осмотреть текущую локацию
- идти [локация] - перейти в указанную локацию (например: идти остров_кирки)

Действия:
- размышлять - обдумать ситуацию (увеличивает Мудрость)
- тосковать - вспоминать о доме (увеличивает Тоску по дому)
- говорить [имя] - начать разговор с персонажем (например: говорить посейдон)
- послание Телемаку - составить мысленное послание сыну
- статус - показать текущие параметры

Предметы:
- взять [предмет] - подобрать предмет (например: взять веревка)
- предметы - просмотреть инвентарь
- использовать [предмет] - использовать предмет из инвентаря (например: использовать веревка)

Вводите команды словами, как указано выше. При составлении послания Телемаку 
используйте цифры для выбора фрагментов (1, 2, 3 и т.д.).

🎮 Цель игры: вернуться на Итаку, накопив достаточно мудрости для положительной концовки.
"""
        return help_text

    def get_intro(self) -> str:
        """Получить вступление к игре"""
        intro = """
╔═════════════════════════╗
║     ОДИССЕЙ ТЕЛЕМАКУ    ║
║————————————————║
║.....игра по мотивам....║
║::::::стихотворения::::::║
║::::::::::Бродского:::::::::║
╚═════════════════════════╝

"Мой Телемак,
Троянская война
окончена. Кто победил – не помню.
Должно быть, греки: столько мертвецов
вне дома бросить могут только греки..."

Ты - Одиссей, царь Итаки, возвращающийся домой после долгой Троянской войны.
Твой путь полон опасностей и испытаний, но ещё важнее - внутренний путь обретения мудрости,
которую ты хочешь передать своему сыну Телемаку, растущему без отца.

В этой игре ты будешь преодолевать препятствия на пути домой и отправлять 
мысленные послания сыну, выбирая строки из стихотворения Бродского.

Для начала введи "осмотреться", чтобы изучить своё окружение, 
или "помощь" для списка доступных команд.
"""
        return intro

    def process_command(self, command: str) -> str:
        """Обработка команды игрока"""
        command = command.lower().strip()

        # Для отладки
        print(f"OdysseusGame processing command: '{command}'")

        # Если игра завершена
        if self.state == "game_over":
            return "Игра завершена. Введи /start для начала новой игры."

        # Если в процессе отправки послания
        if self.state == "message_selection":
            # Обработка выбора фрагментов послания
            try:
                choice = int(command)
                if 1 <= choice <= len(self.temp_data.get("fragments", [])):
                    return self.complete_message(choice - 1)
                else:
                    return f"Выбери число от 1 до {len(self.temp_data.get('fragments', []))}"
            except ValueError:
                # Если введено не число, возвращаемся в обычный режим
                self.state = "normal"
                return "Отправка послания отменена. Введи 'послание телемаку', чтобы попробовать снова."

        # Обработка стандартных команд
        if command == "помощь":
            print("Executing 'помощь' command")
            return self.get_help()
        elif command == "осмотреться":
            print("Executing 'осмотреться' command")
            return self.look_around()
        elif command.startswith("идти "):
            destination = command[5:]
            return self.go_to(destination)
        elif command == "размышлять":
            return self.reflect()
        elif command == "тосковать":
            return self.yearn_for_home()
        elif command.startswith("говорить "):
            person = command[9:]
            return self.talk_to(person)
        elif command == "послание телемаку":
            return self.start_message()
        elif command == "статус":
            return self.show_status()
        elif command.startswith("взять "):
            item = command[6:]
            return self.take_item(item)
        elif command == "предметы":
            return self.list_items()
        elif command.startswith("использовать "):
            item = command[13:]
            return self.use_item(item)
        else:
            print(f"Unknown command: '{command}'")
            return (
                "Я не понимаю эту команду. Введи 'помощь' для списка доступных команд."
            )

    def look_around(self) -> str:
        """Осмотреть текущую локацию"""
        print("Inside look_around method")
        print(f"Current location: {self.current_location}")

        try:
            location = self.locations.get(self.current_location, {})

            description = f"\nТы — Одиссей, находишься в локации: {self.current_location.replace('_', ' ')}.\n"
            description += f"{location.get('description', 'Неизвестное место')}\n\n"

            # Люди в локации
            npcs = location.get("npcs", [])
            if npcs:
                description += "Рядом с тобой:\n"
                for npc in npcs:
                    description += f"- {npc.replace('_', ' ').capitalize()}\n"
            else:
                description += "Здесь никого нет.\n"

            # Предметы, доступные в локации
            items = location.get("items", [])
            if items:
                description += "\nТы видишь вокруг:\n"
                for item in items:
                    description += f"- {item}\n"
            else:
                description += "\nЗдесь нет особых предметов.\n"

            # Возможные направления
            connections = location.get("connections", [])
            if connections:
                description += "\nОтсюда можно пойти в:\n"
                for conn in connections:
                    description += f"- {conn.replace('_', ' ')}\n"

            description += f"\nТвои параметры:\n"
            description += f"- Мудрость: {self.wisdom}/100\n"
            description += f"- Тоска по дому: {self.homesickness}/100\n"
            description += f"- Прогресс пути: {self.journey}/100\n"

            return description
        except Exception as e:
            print(f"Error in look_around: {str(e)}")
            return "Произошла ошибка при осмотре локации."

    def go_to(self, destination: str) -> str:
        """Переместиться в указанную локацию"""
        # Нормализуем название локации
        destination = destination.lower().replace(" ", "_")

        # Проверяем текущую локацию
        current_loc = self.locations.get(self.current_location, {})
        connections = current_loc.get("connections", [])

        if destination not in connections:
            return f"Отсюда нельзя попасть в локацию '{destination.replace('_', ' ')}'.\nДоступные направления: {', '.join([c.replace('_', ' ') for c in connections])}"

        # Перемещаемся в новую локацию
        self.current_location = destination

        # Увеличиваем прогресс
        location_progress = {
            "море": 0,
            "остров_кирки": 15,
            "царство_аида": 30,
            "остров_сирен": 45,
            "между_сциллой_и_харибдой": 60,
            "остров_калипсо": 75,
            "итака": 100,
        }

        self.journey = max(self.journey, location_progress.get(destination, 0))

        # Случайное событие при перемещении
        events = [
            "Волны бьются о борт, напоминая о непостоянстве моря и жизни.",
            "В шуме ветра тебе слышится голос Пенелопы, зовущей тебя домой.",
            "Звезды складываются в узоры, которые помогают определить путь.",
            "Ты вспоминаешь Телемака, каким он был в детстве, и думаешь, каким он стал теперь.",
            "Морская соль разъедает кожу, как время разъедает память.",
        ]

        # Проверяем, не попали ли мы на Итаку
        if destination == "итака":
            # Проверяем условия для концовок
            self.state = "game_over"
            if self.wisdom >= 80:
                return self.get_positive_ending()
            else:
                return self.get_neutral_ending()

        return f"Ты прибыл в локацию: {destination.replace('_', ' ')}.\n\n{random.choice(events)}\n\nВведи 'осмотреться', чтобы изучить окружение."

    def reflect(self) -> str:
        """Размышлять о жизни, увеличивает мудрость"""
        wisdom_gain = random.randint(3, 7)
        self.wisdom = min(100, self.wisdom + wisdom_gain)

        reflections = [
            "Ты размышляешь о тонкой грани между героизмом и безумием. (+{} к Мудрости)",
            "Твои мысли обращаются к мимолетности славы и вечности памяти. (+{} к Мудрости)",
            "Ты понимаешь, что самое длинное путешествие — это путь к себе. (+{} к Мудрости)",
            "В тишине ночи ты осознаешь, что дом — это не место, а состояние души. (+{} к Мудрости)",
            "Наблюдая за звездами, ты думаешь о том, как мало значат наши страсти в масштабах вечности. (+{} к Мудрости)",
        ]

        # Проверка достижения полной мудрости
        if self.wisdom >= 100:
            self.wisdom = 100
            return "Ты достиг полной мудрости. Теперь ты готов передать её сыну, когда вернёшься на Итаку."

        return random.choice(reflections).format(wisdom_gain)

    def yearn_for_home(self) -> str:
        """Тосковать по дому, увеличивает тоску по дому"""
        homesickness_gain = random.randint(4, 8)
        self.homesickness = min(100, self.homesickness + homesickness_gain)

        yearnings = [
            "Закрыв глаза, ты видишь оливковые рощи Итаки и чувствуешь их запах. (+{} к Тоске по дому)",
            "Ты вспоминаешь лицо Пенелопы, её глаза и улыбку, и сердце сжимается от боли. (+{} к Тоске по дому)",
            "Мысли о Телемаке, растущем без отца, наполняют тебя решимостью вернуться. (+{} к Тоске по дому)",
            "Ты представляешь свой дворец, вершину холма, откуда видно море, и тоскуешь по этому виду. (+{} к Тоске по дому)",
            "Звуки чужой речи напоминают, как далеко ты от родного языка и родных берегов. (+{} к Тоске по дому)",
        ]

        # Проверка достижения полной тоски
        if self.homesickness >= 100:
            self.homesickness = 100
            return "Твоя тоска по дому достигла предела. Каждый удар сердца зовёт тебя на Итаку."

        # Проверка условия для альтернативной концовки
        if self.homesickness <= 30 and self.journey >= 60:
            self.state = "game_over"
            return self.get_alternative_ending()

        return random.choice(yearnings).format(homesickness_gain)

    def talk_to(self, person: str) -> str:
        """Поговорить с персонажем"""
        person = person.lower().replace(" ", "_")

        location = self.locations.get(self.current_location, {})
        npcs = location.get("npcs", [])

        if person not in npcs:
            return f"Здесь нет никого с именем '{person.replace('_', ' ')}'."

        # Диалоги с персонажами для Одиссея
        dialogs = {
            "посейдон": {
                "text": """
Волны поднимаются выше, образуя подобие лица из пены.

Посейдон: "Ты, осмелившийся ослепить моего сына Полифема, познаешь долгую разлуку с домом. Я не уничтожу тебя, но испытаю твое терпение и мудрость."

Из этого трудного момента ты извлек мудрость: не хвастаться своими деяниями перед богами.
""",
                "effects": {"wisdom": 5, "homesickness": 10},
            },
            "старый_моряк": {
                "text": """
Старый моряк смотрит на тебя взглядом, полным сострадания и понимания.

Старый моряк: "Много морей я пересек, много штормов пережил. Знаешь, царь, сила не в том, чтобы бороться с морем, а в том, чтобы плыть туда, куда оно позволяет, выжидая момент для своего курса."

Ты получил совет, который поможет в странствиях: иногда нужно уступить, чтобы в конце концов победить.
""",
                "effects": {"wisdom": 8},
            },
            "кирка": {
                "text": """
Кирка смотрит на тебя глазами, в которых отражается мудрость веков.

Кирка: "Чтобы вернуться домой, ты должен сначала спуститься в царство мертвых и поговорить с прорицателем Тиресием. Только он может указать тебе путь. Но помни, между знанием и домом лежит пропасть потери."

Ты понимаешь, что путь домой будет еще долгим, и это усиливает твою тоску.
""",
                "effects": {"wisdom": 7, "homesickness": 5},
            },
            "тиресий": {
                "text": """
Тень Тиресия поднимается из туманной глубины, глаза провидца излучают неземной свет.

Тиресий: "Путь домой возможен, но тернист. Ты вернешься на Итаку один, потеряв всех спутников. Не трогай скот Гелиоса. Берегись Сцилл и Харибд жизни. В доме найдешь бедствие — женихов, пожирающих твое достояние. Но прежде чем мстить, ты должен быть никем, чтобы стать собой."

Эти пророчества одновременно дают надежду и тревожат душу. Ты продвинулся в понимании своего пути.
""",
                "effects": {"wisdom": 10, "homesickness": 5, "journey": 10},
            },
            "антиклея": {
                "text": """
Тень твоей матери приближается, её взгляд полон любви и печали.

Антиклея: "Сын мой, я умерла от тоски по тебе. Твой отец живет отшельником, скорбя. Телемак и Пенелопа ждут, окруженные врагами. Не мешкай, но и не торопись — каждый шаг на пути домой должен быть верным."

Слова матери о семье, которую ты не видел так долго, наполняют сердце невыносимой тоской.
""",
                "effects": {"wisdom": 8, "homesickness": 15},
            },
            "сирены": {
                "text": """
Голоса сирен доносятся до тебя, несмотря на воск в ушах команды. Они обещают знание всего, что было и будет.

Сирены: "Мы знаем все страдания, что ахейцы и трояне испытали волею богов. Знаем все, что случится на земле. Подойди, узнай свою судьбу и судьбу мира..."

Привязанный к мачте, ты слышишь обещание знания, но выбираешь незнание и жизнь. В этом парадоксе ты находишь глубокую мудрость: иногда отказ от знания мудрее, чем его получение.
""",
                "effects": {"wisdom": 15},
            },
            "сцилла": {
                "text": """
Многоголовое чудовище нависает с утеса, готовое схватить любого, кто подойдет слишком близко.

Проходя мимо Сциллы, ты принимаешь тяжелое решение: пожертвовать частью команды, чтобы спасти корабль. Это приносит тебе горькую мудрость о природе выбора в невыносимых ситуациях.
""",
                "effects": {"wisdom": 6, "homesickness": 5},
            },
            "харибда": {
                "text": """
Водоворот Харибды поглощает и извергает море трижды в день. Его рев наполняет воздух.

Наблюдая за ритмом Харибды, ты понимаешь важную истину: даже самые страшные опасности имеют свой ритм и паттерн. Терпение и наблюдательность могут помочь найти путь там, где его, казалось бы, нет.
""",
                "effects": {"wisdom": 6},
            },
            "калипсо": {
                "text": """
Прекрасная нимфа Калипсо смотрит на тебя с нежностью и затаенной грустью.

Калипсо: "Я предлагаю тебе вечную жизнь и вечную молодость рядом со мной. Отчего ты так стремишься к смертной жене, которая увянет, в то время как я буду вечно молода?"

Ты отвечаешь: "Всё, что я знаю — я хочу домой. Даже если Пенелопа не так прекрасна, как ты, она смертна, как и я. В этом наше равенство и наша судьба."

В этом выборе между бессмертием и домом ты находишь понимание глубинной сути человеческого существования.
""",
                "effects": {"wisdom": 5, "homesickness": 10},
            },
            "гермес": {
                "text": """
Гермес, посланник богов, неожиданно появляется перед тобой.

Гермес: "Зевс посылает тебе весть: Калипсо должна отпустить тебя. Построй плот и отправляйся в путь. Однако последнее испытание ждет тебя — прибыв на Итаку, ты должен вернуть не только дом, но и себя."

Ты получаешь божественную поддержку и понимаешь, что конец путешествия близок, но самое сложное испытание еще впереди.
""",
                "effects": {"wisdom": 7, "journey": 15},
            },
            "телемак": {
                "text": """
Перед тобой стоит молодой человек, в чертах которого ты узнаешь себя в молодости.

Телемак смотрит на тебя с недоверием - он не знает, что перед ним его отец в обличье нищего.

Момент встречи, к которому ты шел все эти годы, наконец настал. Но прежде чем раскрыть себя, тебе нужно убедиться, что он достоин своего наследия.
""",
                "effects": {"homesickness": 20},
            },
            "пенелопа": {
                "text": """
Царица Итаки, твоя верная Пенелопа, разговаривает с нищим, не зная, что перед ней её муж.

В её глазах - усталость от долгих лет ожидания, но и непоколебимая верность. Она рассказывает о своей хитрости с тканьем погребального савана для Лаэрта, которую она распускала каждую ночь, чтобы оттянуть выбор нового мужа.

Твоё сердце переполняется любовью и гордостью - ты понимаешь, что все испытания были не напрасны.
""",
                "effects": {"homesickness": 20, "wisdom": 10},
            },
        }

        # Получаем диалог для выбранного персонажа
        dialog = dialogs.get(person, {})

        if not dialog:
            return f"Разговор с {person.replace('_', ' ')} не реализован."

        # Применяем эффекты
        effects = dialog.get("effects", {})
        for param, value in effects.items():
            if param == "wisdom":
                self.wisdom = min(100, self.wisdom + value)
            elif param == "homesickness":
                self.homesickness = min(100, self.homesickness + value)
            elif param == "journey":
                self.journey = min(100, self.journey + value)

        return dialog.get("text", "Вы поговорили, но ничего особенного не произошло.")

    def show_status(self) -> str:
        """Показать текущие параметры игрока"""
        status = f"""
Статус Одиссея:
- Мудрость: {self.wisdom}/100
- Тоска по дому: {self.homesickness}/100
- Прогресс пути: {self.journey}/100
- Отправлено посланий: {self.messages_sent}
- Текущая локация: {self.current_location.replace('_', ' ')}
"""
        if self.inventory:
            status += "\nИнвентарь:\n"
            for item in self.inventory:
                status += f"- {item}\n"
        else:
            status += "\nУ тебя нет предметов в инвентаре."

        return status

    def take_item(self, item_name: str) -> str:
        """Взять предмет из локации"""
        # Получаем текущую локацию
        location = self.locations.get(self.current_location, {})
        items = location.get("items", [])

        # Проверяем, есть ли предмет в локации
        if item_name not in items:
            return f"Здесь нет предмета '{item_name}'."

        # Добавляем предмет в инвентарь
        self.inventory.append(item_name)

        # Удаляем предмет из локации
        items.remove(item_name)

        return f"Ты взял предмет: {item_name}."

    def list_items(self) -> str:
        """Показать инвентарь"""
        if not self.inventory:
            return "У тебя нет предметов в инвентаре."

        items_text = "Твой инвентарь:\n"
        for item in self.inventory:
            items_text += f"- {item}\n"

        return items_text

    def use_item(self, item_name: str) -> str:
        """Использовать предмет из инвентаря"""
        if item_name not in self.inventory:
            return f"У тебя нет предмета '{item_name}' в инвентаре."

        # Специальные эффекты от использования предметов
        effects = {
            "веревка": "Ты использовал веревку, чтобы привязать себя к мачте. Это поможет противостоять песням сирен.",
            "странные травы": "Травы Кирки дают тебе ясность ума и защиту от ее чар. (+5 к Мудрости)",
            "кубок с вином": "Вино Кирки странно на тебя действует. Ты чувствуешь себя более восприимчивым к мудрости. (+3 к Мудрости)",
            "чаша для жертвоприношений": "Ты совершаешь подношение теням подземного царства. Мудрость предков нисходит на тебя. (+7 к Мудрости)",
            "воск для ушей": "Ты используешь воск, чтобы защитить свою команду от пения сирен.",
            "обрывки карт": "Изучив карты, ты лучше понимаешь свой путь. (+5 к Мудрости, +10 к Прогрессу пути)",
            "весло": "Весло помогает тебе маневрировать в опасных водах между Сциллой и Харибдой.",
            "плотницкие инструменты": "Ты используешь инструменты, чтобы построить плот для отплытия с острова Калипсо. (+15 к Прогрессу пути)",
            "обломки корабля": "Эти обломки напоминают о прошлых неудачах и учат тебя осторожности. (+3 к Мудрости)",
        }

        message = effects.get(
            item_name, f"Ты использовал {item_name}, но ничего особенного не произошло."
        )

        # Применяем эффекты
        if item_name == "странные травы":
            self.wisdom = min(100, self.wisdom + 5)
        elif item_name == "кубок с вином":
            self.wisdom = min(100, self.wisdom + 3)
        elif item_name == "чаша для жертвоприношений":
            self.wisdom = min(100, self.wisdom + 7)
        elif item_name == "обрывки карт":
            self.wisdom = min(100, self.wisdom + 5)
            self.journey = min(100, self.journey + 10)
        elif item_name == "плотницкие инструменты":
            self.journey = min(100, self.journey + 15)
        elif item_name == "обломки корабля":
            self.wisdom = min(100, self.wisdom + 3)

        # Удаляем предмет из инвентаря после использования
        self.inventory.remove(item_name)

        return message

    def start_message(self) -> str:
        """Начать составление послания Телемаку"""
        print("Starting message creation")
        # Выбираем 4 случайных фрагмента для выбора
        selected_fragments = random.sample(self.message_fragments, min(4, len(self.message_fragments)))
        print(f"Selected fragments: {len(selected_fragments)}")
        
        # Сохраняем выбранные фрагменты во временные данные
        self.temp_data["fragments"] = selected_fragments
        print(f"Stored fragments in temp_data: {len(self.temp_data.get('fragments', []))}")
        
        # Формируем текст для выбора
        message = "Ты составляешь мысленное послание своему сыну Телемаку. Выбери фрагмент (введи число):\n\n"
        
        for i, fragment in enumerate(selected_fragments, 1):
            message += f"{i}. \"{fragment['text']}\"\n\n"
        
        # Переходим в режим выбора фрагмента
        self.state = "message_selection"
        print(f"State changed to: {self.state}")
        
        return message

    def complete_message(self, index: int) -> str:
        """Завершить отправку послания"""
        fragments = self.temp_data.get("fragments", [])
        if not fragments or index >= len(fragments):
            self.state = "normal"
            return "Что-то пошло не так. Попробуй снова составить послание."

        # Получаем выбранный фрагмент
        fragment = fragments[index]

        # Применяем эффекты
        effects = fragment.get("effects", {})
        effects_text = ""

        for param, value in effects.items():
            if param == "wisdom":
                self.wisdom = min(100, self.wisdom + value)
                effects_text += f"Мудрость +{value}\n"
            elif param == "homesickness":
                self.homesickness = min(100, self.homesickness + value)
                effects_text += f"Тоска по дому +{value}\n"

        # Увеличиваем счетчик отправленных посланий
        self.messages_sent += 1

        # Возвращаемся в обычный режим
        self.state = "normal"

        return f"""
Ты отправляешь мысленное послание Телемаку:

"{fragment['text']}"

{effects_text}
Твои послания формируют его характер, даже несмотря на расстояние между вами.
"""

    def check_special_ending(self) -> bool:
        """Проверить условие для особой концовки"""
        # Проверяем, достигли ли мы Итаки с достаточным уровнем мудрости
        if self.current_location == "итака" and self.wisdom >= 80:
            self.state = "game_over"
            return True
        return False

    def check_time_ending(self) -> bool:
        """Проверить условие для концовки по времени"""
        # В этой игре нет концовки по времени
        return False

    def get_special_ending(self) -> str:
        """Получить текст особой концовки"""
        # Используем существующий метод get_positive_ending или get_neutral_ending
        if self.wisdom >= 80:
            return self.get_positive_ending()
        else:
            return self.get_neutral_ending()

    def get_time_ending(self) -> str:
        """Получить текст концовки по времени"""
        # В этой игре нет концовки по времени
        return "Твоё путешествие затянулось. Время вышло."

    def get_positive_ending(self) -> str:
        """Получить положительную концовку"""
        return """
╔══════════════════════════╗
║   ПОЛОЖИТЕЛЬНАЯ КОНЦОВКА   ║
╚══════════════════════════╝

Твое путешествие подошло к концу. Ты вернулся на Итаку, обретя мудрость и понимание.
Телемак, выросший в достойного юношу, узнает тебя, несмотря на годы разлуки.
Пенелопа, хранившая верность все эти годы, принимает тебя в свои объятия.

Опыт странствий и испытаний сделал тебя не только великим воином,
но и мудрым правителем, способным вести Итаку к процветанию.

Вечерами ты рассказываешь сыну о своих приключениях,
передавая ему не только рассказы о подвигах, но и уроки жизни.

КОНЕЦ ИГРЫ.
Ты прошел путь Одиссея и обрел свой дом.

Введи /start, чтобы начать новую игру.
"""

    def get_neutral_ending(self) -> str:
        """Получить нейтральную концовку"""
        return """
╔═════════════════════╗
║   НЕЙТРАЛЬНАЯ КОНЦОВКА   ║
╚═════════════════════╝

Ты вернулся на Итаку, но не стал мудрее в своих странствиях.
Путь к дому был долгим, но не оставил в тебе глубоких следов.

Воссоединение с семьей приносит радость, но вскоре ты ощущаешь пустоту.
Твой дом кажется чужим, а Телемак смотрит на тебя как на незнакомца.

Ты правишь Итакой справедливо, но без вдохновения.
Воспоминания о странствиях постепенно блекнут в памяти.

КОНЕЦ ИГРЫ.
Ты завершил путь Одиссея, но не раскрыл его полный смысл.

Введи /start, чтобы начать новую игру.
"""

    def get_alternative_ending(self) -> str:
        """Получить альтернативную концовку (отказ от возвращения)"""
        return """
╔═════════════════════╗
║  АЛЬТЕРНАТИВНАЯ КОНЦОВКА  ║
╚═════════════════════╝

Ты так долго странствовал, что мысль о возвращении на Итаку постепенно утратила значение.
Новые берега, новые люди, новые приключения заменили тебе дом и семью.

Достигнув острова Калипсо, ты принимаешь предложение нимфы.
Бессмертие и вечная молодость становятся твоей судьбой.
Иногда ты думаешь о Телемаке и Пенелопе, но эти мысли все реже тревожат тебя.

Ты стал частью легенды — Одиссей, который не вернулся.

КОНЕЦ ИГРЫ.
Ты выбрал другой путь, отличный от судьбы Одиссея в поэме.

Введи /start, чтобы начать новую игру.
"""
