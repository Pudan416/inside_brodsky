from aiogram import Dispatcher, Bot, types
from aiogram.filters import Command
from typing import Dict, Optional
from games import AVAILABLE_GAMES
from games.base_game import BaseGame
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_games: Dict[int, BaseGame] = {}  # user_id -> –∏–≥—Ä–∞


def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_help, Command("help"))
    dp.message.register(cmd_exit, Command("exit"))
    dp.message.register(handle_messages)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π


async def cmd_start(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –≤—ã–±–æ—Ä –∏–≥—Ä—ã"""
    user_id = message.from_user.id

    # Clear user state
    await state.clear()

    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
    await state.update_data(selecting=True)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –∏–≥—Ä–µ, —É–¥–∞–ª—è–µ–º –µ—ë
    if user_id in user_games:
        del user_games[user_id]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä
    menu_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –ø–æ—ç–∑–∏–∏ –ò–æ—Å–∏—Ñ–∞ –ë—Ä–æ–¥—Å–∫–æ–≥–æ!\n–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É, –Ω–∞–ø–∏—à–∏—Ç–µ –µ—ë –Ω–æ–º–µ—Ä:\n"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã –∏–∑ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    for i, game_class in enumerate(AVAILABLE_GAMES, 1):
        menu_text += f"\n{i}. {game_class.name} ('{game_class.poem}')"
        if hasattr(game_class, "description"):
            menu_text += f" - {game_class.description}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    await bot.send_message(chat_id=message.chat.id, text=menu_text)


async def cmd_help(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help - –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """
üìö –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –ö–æ—Å—Ç—è. 
–ö–æ –¥–Ω—é —Ä–æ–∂–¥–µ–Ω–∏—è –ò–æ—Å–∏—Ñ–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á–∞ –ë—Ä–æ–¥—Å–∫–æ–≥–æ—Ç–æ —è —Å–¥–µ–ª–∞–ª —Å–µ—Ä–∏—é –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏–≥—Ä –ø–æ –º–æ—Ç–∏–≤–∞–º –º–æ–∏—Ö –ª—é–±–∏–º—ã—Ö –µ–≥–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π!

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —ç—Ç–æ–≥–æ –±–æ—Ç–∞:
/start - –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É –∏–ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/exit - –í—ã–π—Ç–∏ –∏–∑ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã

–í–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Å–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ ‚Äì –Ω–∞–ø–∏—à–∏—Ç–µ "–ø–æ–º–æ—â—å" –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã.

–ò–∑ —É–≤–∞–∂–µ–Ω–∏—è –∫ –ø–æ—ç—Ç—É –≤—Å—ë —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–≥—Ä–∞—Ö –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Å–ª–æ–≤. –ù–∏–∫–∞–∫–∏—Ö –∫–Ω–æ–ø–æ–∫, –∫–∞–∫ –≤ —Å—Ç–∞—Ä—ã—Ö –¥–æ–±—Ä—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–≤–µ—Å—Ç–∞—Ö.

–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –º–Ω–µ –∫–æ—Ñ–µ 
"""
    await bot.send_message(chat_id=message.chat.id, text=help_text)


async def cmd_exit(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /exit - –≤—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã"""
    user_id = message.from_user.id
    if user_id in user_games:
        del user_games[user_id]

    # Clear the state
    await state.clear()

    await bot.send_message(
        chat_id=message.chat.id,
        text="–í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é.",
    )


async def handle_messages(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not message.text:
        return

    user_id = message.from_user.id
    text = message.text.strip()

    # Get current state data
    state_data = await state.get_data()
    selecting = state_data.get("selecting", False)
    game_state = state_data.get("game_state", None)
    game_type = state_data.get("game_type", "")

    # Debug information
    print(f"User {user_id} message: '{text}'")
    print(f"State data: {state_data}")
    print(f"Selecting: {selecting}, Game type: {game_type}")

    # If user is selecting a game
    if selecting:
        try:
            game_index = int(text) - 1
            print(
                f"User selected game index: {game_index}, available games: {len(AVAILABLE_GAMES)}"
            )

            # Check if it's one of the placeholder games
            if game_index >= len(AVAILABLE_GAMES):
                await bot.send_message(
                    chat_id=message.chat.id,
                    text="–≠—Ç–∞ –∏–≥—Ä–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–≥—Ä—É.",
                )
                return

            # Check if index is in valid range
            if 0 <= game_index < len(AVAILABLE_GAMES):
                # Create new game
                game_class = AVAILABLE_GAMES[game_index]
                game = game_class(user_id)
                print(f"Created game: {game_class.__name__}")

                # Store reference for current session
                user_games[user_id] = game

                # Get initial game state
                initial_state = game.save_game_state()
                print(f"Initial game state: {initial_state}")

                # Update state - no longer selecting, store initial game state
                await state.update_data(
                    selecting=False,
                    game_state=initial_state,
                    game_type=game_class.__name__,
                )

                # Send game intro
                await bot.send_message(chat_id=message.chat.id, text=game.get_intro())
            else:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text="–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞.",
                )
        except ValueError as e:
            print(f"ValueError during game selection: {str(e)}")
            await bot.send_message(
                chat_id=message.chat.id,
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–≥—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞.",
            )
        return

    # If user has an active game
    # –ö–æ–¥ –¥–ª—è –∑–∞–º–µ–Ω—ã —á–∞—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ handle_messages –≤ handlers.py

# –ï—Å–ª–∏ user has an active game
    elif game_state:
        game = None

        # Debug the game state format
        print(f"Game state format check: '{game_state[:20]}...'")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–≥—Ä—ã –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if game_state.startswith("room"):
            from games.room import RoomGame
            game = RoomGame.load_from_state_string(user_id, game_state)
            print(f"Loaded RoomGame with state: {game.state}")
        elif game_state.startswith("odysseus"):
            from games.odysseus import OdysseusGame
            game = OdysseusGame.load_from_state_string(user_id, game_state)
            print(f"Loaded OdysseusGame with state: {game.state}")
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –∏–≥—Ä—ã –û–¥–∏—Å—Å–µ–π
            print(f"OdysseusGame current location: {game.current_location}")
            print(f"OdysseusGame wisdom: {game.wisdom}, homesickness: {game.homesickness}")
        elif game_state.startswith("roman"):
            from games.roman_friend import RomanFriendGame
            game = RomanFriendGame.load_from_state_string(user_id, game_state)
            print(f"Loaded RomanFriendGame with state: {game.state}")

        # If no game was loaded, handle error
        if game is None:
            print("Failed to load or create a game")
            await bot.send_message(
                chat_id=message.chat.id,
                text="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
            )
            return

        # Process command with extra debug
        print(f"Processing command '{text}' with game state: {game.state}")
        result = game.process_command(text)
        print(f"Command result: {result[:50]}...")  # Print first 50 chars of result
        print(f"After processing, game state: {game.state}")

        # Update the game instance in the user_games dictionary
        user_games[user_id] = game

        # Save the updated game state before checking endings
        new_game_state = game.save_game_state()
        print(f"New saved game state: {new_game_state}")
        await state.update_data(game_state=new_game_state)

        # Check for special endings
        if game.check_special_ending():
            result = game.get_special_ending()
            # Clear game state to start fresh
            await state.clear()
        elif game.check_time_ending():
            result = game.get_time_ending()
            # Clear game state to start fresh
            await state.clear()

        # Send result
        await bot.send_message(chat_id=message.chat.id, text=result)
    else:
        # User isn't in a game and isn't selecting
        await bot.send_message(
            chat_id=message.chat.id,
            text="–í—ã –Ω–µ –≤ –∏–≥—Ä–µ. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É.",
        )